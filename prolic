#!perl

=head1 NAME

prolic - Add licence and copyright to a standard prologue.

=head1 SYNOPSIS

  prolic *.f
  cat test.f | prolic

=head1 DESCRIPTION

If file names are provided, the files are analysed and if a licence
or copyright are required, they are added and the files rewritten.

If the source code is piped from stdin, the file is read and written to
stdout, modifying if necessary.

=head1 OPTIONS

=over 4

=item B<-version>

Report the version number.

=item B<-help>

Display the help information.

=item B<-man>

Display the full manual page.

=back

=cut

use strict;
use warnings;
use Pod::Usage;
use Getopt::Long;
use Text::Wrap;

use Starlink::Prologue;
use Starlink::Prologue::Parser;

# Options
my ($help, $man, $version);
my $status = GetOptions("help" => \$help,
                        "man" => \$man,
                        "version" => \$version,
                       );

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
  my $id = '$Id$ ';
  print "prolic - Write licence and copyright to a file\n";
  print " CVS revision: $id\n";
  exit;
}

# Read the licence from the DATA handle
my @LICENCE = <DATA>;
chomp(@LICENCE);

# Copyright defaults
my %COPYTEXT = (
		SERC => "Science & Engineering Research Council",
		CLRC => "Central Laboratory of the Research Councils",
		PPARC => "Particle Physics & Astronomy Research Council",
	       );

# do we have standard input or file arguments?

if (@ARGV) {
  # files on command line
  for my $file (@ARGV) {
    next unless -f $file;
    open(my $fh, "<$file") || die "Error opening file $file for read: $!\n";
    my ($nmodified, $types, $rewrite) = _process( $file, <$fh> );
    close($fh) || die "Error closing input file $file: $!\n";

    # was a prologue modified?
    if ($nmodified) {
      if (scalar keys %$types == 1 && exists $types->{STARLSE}) {
	# Standard prologue
	# open the input file for write
	open( my $fh, ">", $file) || 
	  die "Error opening file $file for writing modified prologue: $!";
	print $fh $rewrite;
	close( $fh ) || die "Error closing output file $file: $!\n";
      } else {
	print STDERR "Prologue non-standard in $file, not modifying\n";
      }
    }
  }
} else {
  # try reading from pipe
  my @lines = <>;
  if (@lines) {
    my ($nmodified, $types, $rewrite) = _process( undef, @lines );
    print $rewrite;
  }
}

exit;

sub _process {
  my $file = shift;
  my @lines = @_;
  my $parser = new Starlink::Prologue::Parser;
  my @processed = $parser->parse_lines( @lines );

  $file = "stdin" unless defined $file;

  # now analyse
  my $nmod = 0; # Number modified
  my @types;   # type of each prologue found
  my $output = ''; # output text;

  # look at each line
  for my $line (@processed) {
    if (ref($line)) {
      # prologue object
      my $mod;
      # do we have licence?
      if (! @{$line->licence}) {
	# No!
	$line->licence( @LICENCE );
	$mod = 1;
      }

      # Copyright?
      if (! @{$line->copyright} ) {
	# No!

	# Get the years from the history
	my @years = $line->years;

	if (!@years) {
	  my @date = gmtime(time);
	  push(@years, ($date[5]+1900));
	  print STDERR "WARNING: No year for copyright in $file. Assigning current year ($years[0]).\n";
	}

	if (@years) {
	  # pick default assignment of copyright
	  my @clrc;
	  my @pparc;
	  my @serc;
	  for my $yr (sort @years) {
	    if ($yr < 1995) {
	      push(@serc, $yr);
	    } elsif ($yr >= 2005) {
	      push(@pparc, $yr);
	    } else {
	      push(@clrc, $yr);
	    }
	  }

	  # Build up the copyright text
	  my $ctext = '';
	  $ctext .= _write_copyright( $COPYTEXT{SERC}, @serc );
	  $ctext .= " "._write_copyright( $COPYTEXT{CLRC}, @clrc );
	  $ctext .= " "._write_copyright( $COPYTEXT{PPARC}, @pparc );
	  if ($ctext) {
	    $ctext .= " All Rights Reserved.";

	    # now word wrap to 66 characters (compress multiple spaces)
	    $ctext =~ s/^\s+//;
	    $ctext =~ s/\s+$//;
	    $ctext =~ s/\s+/ /g;
	    local $Text::Wrap::columns = 66;
	    $ctext = wrap('','',$ctext);

	    # store the copyright text
	    $line->copyright( split /\n/,$ctext );

	    $mod = 1;
	  }
	}
	if (!$mod) {
	  my ($section, $name) = $line->name(); 
	  $name = $name->[0];
	  print STDERR "Unable to set copyright in file $file ($name)\n";
	}
      }

      # Guess missing items
      $line->guess_defaults( File => $file );

      # store type
      push(@types, $line->prologue_type);

      # increment mod count
      $nmod++ if $mod;

      # Add it to the output string
      $output .= $line->stringify;

    } else {
      # normal source line
      chomp($line);
      $output .= $line ."\n";
    }
  }

  # information to user
  # was a prologue modified?
  my %types = map { $_, undef } @types;
  if ($nmod) {
    # inform the user the type of prologues located
    print STDERR "Prologue in file $file contains ", join(", ",sort keys %types),
      " prologues (modified $nmod of ".@types." ).\n";
  } else {
    if (@types != 0) {
      print STDERR "Prologue in file $file does not need to be modified\n";
    } else {
      print STDERR "No prologue located in file $file\n";
    }
  }

  # finished
  return ($nmod, \%types, $output);
}

sub _write_copyright {
  my $copytext = shift;
  my @years = @_;
  return '' unless @years;

  # first compress years
  my @compressed;
  my $start;
  my $prev;
  for my $y (@years) {
    if (!defined $start) {
      $start = $y;
      $prev = $y;
    } elsif ($y - $prev == 1 ) {
      # in range
      $prev = $y;
    } elsif ($y - $prev > 1) {
      # more than 1 year gap
      if ($start != $prev) {
	# range
	push(@compressed, "$start-$prev");
      } else {
	# single year
	push(@compressed, $start);
      }
      # reset start year
      $start = $y;
      $prev = $y;
    } else {
      die "Internal error in write_copyright\n";
    }
  }
  # last year
  if ($start != $prev) {
    push(@compressed, "$start-$prev");
  } else {
    push(@compressed, $start);
  }

  return "Copyright (C) ". join(", ",@compressed). " $copytext.";
}

=head1 SEE ALSO

C<procvt>, C<prolis>

=head1 NOTES

Compliance with the GPL requires that each source file is tagged with
a minimum licence and copyright.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright 2006 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

1;

__DATA__
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
02111-1307, USA
